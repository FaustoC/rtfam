"use strict";(self.webpackChunkrtfam=self.webpackChunkrtfam||[]).push([[3736],{7110:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>h,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var a=n(4848),i=n(8453);const o={title:"ATTACHMENTS",tags:["ATTACHMENTS"]},s="ATTACHMENTS",r={id:"General Rules and Errata/ATTACHMENTS",title:"ATTACHMENTS",description:"Are Scorpion Modifications Attachment Cards, or merely Attached cards?",source:"@site/docs/General Rules and Errata/ATTACHMENTS.md",sourceDirName:"General Rules and Errata",slug:"/General Rules and Errata/ATTACHMENTS",permalink:"/docs/General Rules and Errata/ATTACHMENTS",draft:!1,unlisted:!1,tags:[{label:"ATTACHMENTS",permalink:"/docs/tags/attachments"}],version:"current",frontMatter:{title:"ATTACHMENTS",tags:["ATTACHMENTS"]},sidebar:"rtfamSidebar",previous:{title:"ACTIVATED",permalink:"/docs/General Rules and Errata/ACTIVATED"},next:{title:"ATTACK ACTION REFACE/REPOSITION INTO OTHER ENEMY UNITS",permalink:"/docs/General Rules and Errata/ATTACK ACTION"}},h={},d=[{value:"Are Scorpion Modifications Attachment Cards, or merely Attached cards?",id:"are-scorpion-modifications-attachment-cards-or-merely-attached-cards",level:4},{value:"If an Attachment is destroyed or somehow removed from a unit, does the unit lose the Abilities of the Attachment?",id:"if-an-attachment-is-destroyed-or-somehow-removed-from-a-unit-does-the-unit-lose-the-abilities-of-the-attachment",level:4},{value:"If an Attachment is destroyed or somehow removed from a unit, does the unit lose the Abilities of the Attachment?",id:"if-an-attachment-is-destroyed-or-somehow-removed-from-a-unit-does-the-unit-lose-the-abilities-of-the-attachment-1",level:4},{value:"If my opponent has an Attachment that is added to my unit (such as Jaqen H&#39;ghar, Unnamed), and that unit already contains an Attachment, how is the order determined?",id:"if-my-opponent-has-an-attachment-that-is-added-to-my-unit-such-as-jaqen-hghar-unnamed-and-that-unit-already-contains-an-attachment-how-is-the-order-determined",level:4},{value:"Follow-up: So this means if the unit is dealt enough Wounds to remove that Attachment, but not destroy the unit, the Attachment is removed (and thus its Ability lost)?",id:"follow-up-so-this-means-if-the-unit-is-dealt-enough-wounds-to-remove-that-attachment-but-not-destroy-the-unit-the-attachment-is-removed-and-thus-its-ability-lost",level:4},{value:"If an Attachment is destroyed from a unit, and then wounds are restored to the unit, can the Attachment be returned?",id:"if-an-attachment-is-destroyed-from-a-unit-and-then-wounds-are-restored-to-the-unit-can-the-attachment-be-returned",level:4},{value:"When effects say to \u201cignore usual attachment limits\u201d, what exactly is ignored?",id:"when-effects-say-to-ignore-usual-attachment-limits-what-exactly-is-ignored",level:4}];function c(t){const e={h1:"h1",h4:"h4",p:"p",...(0,i.R)(),...t.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{id:"attachments",children:"ATTACHMENTS"}),"\n",(0,a.jsx)(e.h4,{id:"are-scorpion-modifications-attachment-cards-or-merely-attached-cards",children:"Are Scorpion Modifications Attachment Cards, or merely Attached cards?"}),"\n",(0,a.jsx)(e.p,{children:"They are merely Attached cards."}),"\n",(0,a.jsx)(e.h4,{id:"if-an-attachment-is-destroyed-or-somehow-removed-from-a-unit-does-the-unit-lose-the-abilities-of-the-attachment",children:"If an Attachment is destroyed or somehow removed from a unit, does the unit lose the Abilities of the Attachment?"}),"\n",(0,a.jsx)(e.p,{children:"Yes."}),"\n",(0,a.jsx)(e.h4,{id:"if-an-attachment-is-destroyed-or-somehow-removed-from-a-unit-does-the-unit-lose-the-abilities-of-the-attachment-1",children:"If an Attachment is destroyed or somehow removed from a unit, does the unit lose the Abilities of the Attachment?"}),"\n",(0,a.jsx)(e.p,{children:"Yes."}),"\n",(0,a.jsx)(e.h4,{id:"if-my-opponent-has-an-attachment-that-is-added-to-my-unit-such-as-jaqen-hghar-unnamed-and-that-unit-already-contains-an-attachment-how-is-the-order-determined",children:"If my opponent has an Attachment that is added to my unit (such as Jaqen H'ghar, Unnamed), and that unit already contains an Attachment, how is the order determined?"}),"\n",(0,a.jsx)(e.p,{children:"The unit's owner determines the order in which they are placed within the unit."}),"\n",(0,a.jsx)(e.h4,{id:"follow-up-so-this-means-if-the-unit-is-dealt-enough-wounds-to-remove-that-attachment-but-not-destroy-the-unit-the-attachment-is-removed-and-thus-its-ability-lost",children:"Follow-up: So this means if the unit is dealt enough Wounds to remove that Attachment, but not destroy the unit, the Attachment is removed (and thus its Ability lost)?"}),"\n",(0,a.jsx)(e.p,{children:"Yes."}),"\n",(0,a.jsx)(e.h4,{id:"if-an-attachment-is-destroyed-from-a-unit-and-then-wounds-are-restored-to-the-unit-can-the-attachment-be-returned",children:"If an Attachment is destroyed from a unit, and then wounds are restored to the unit, can the Attachment be returned?"}),"\n",(0,a.jsx)(e.p,{children:"No. Once destroyed, the Attachment is permanently lost. The unit may only restore generic models."}),"\n",(0,a.jsx)(e.h1,{id:"attachments-ignoring-usual-attachment-limits",children:"ATTACHMENTS \u201cIGNORING USUAL ATTACHMENT LIMITS\u201d"}),"\n",(0,a.jsx)(e.h4,{id:"when-effects-say-to-ignore-usual-attachment-limits-what-exactly-is-ignored",children:"When effects say to \u201cignore usual attachment limits\u201d, what exactly is ignored?"}),"\n",(0,a.jsx)(e.p,{children:"The limit of 1 attachment per unit, as well as standard list building rules of point limit and faction. You DO NOT ignore the unit type restrictions ( the attachment must still be of the same unit type they are being added to )."})]})}function m(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,a.jsx)(e,{...t,children:(0,a.jsx)(c,{...t})}):c(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>s,x:()=>r});var a=n(6540);const i={},o=a.createContext(i);function s(t){const e=a.useContext(o);return a.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function r(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:s(t.components),a.createElement(o.Provider,{value:e},t.children)}}}]);